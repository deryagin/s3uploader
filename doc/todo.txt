[x] Откатиться к варианту, когда небыло разделения на _populate/_initialize. Написать несколько интеграционных тестов. Проверить какое они дадут покрытие.
[ ] Реализовать 3 вариантами:
    [ ] Простым (быстрым способом), используя интеграционные тесты.
    [x] Способом, делающим код тестопригодным. Покрыть unit-тестами.
    [ ] Простым способом, но с применением новшеств ES6: классы и т.п.
    [ ] Поместить каждый из 3 способой в свой неймспейс.
[ ] Информацию об автолоаде лучше вынести из package.json напр. в loader.js
[ ] Отделить TestHarness.js и Autoloader.js от проекта.
[ ] В TestHarness.js добавить метод для тестирования, что EventEmitter имеет подписчиков на все надлежащие события.
[ ] Возможно вместо package.json:scripts лучше использовать Makefile? Т.к. это более универсальная вещь. Добавить в Makefile инсталляцию.
[ ] Возможно todo.txt лучше перенести в README.md?
[ ] Все таки нужно попробывать BDD тесты. Поскольку, когда все идет через 1 метод получается не очень. См. S3SenderTest.js
[ ] Добавить тесты для всего.
[ ] Перенести ClassLoader в lib. В последствии оформить его как отдельный модуль. Проверить соответствие PSR-4.
[ ] Логгер, проверить соответствие PSR-3. Вынести в lib.
[ ] Изучить вопрос использования scoped packages (@organization/package) вместо папки lib. (https://docs.npmjs.com/misc/scope, https://docs.npmjs.com/getting-started/scoped-packages)
[ ] Вернуться к JSDoc. config, emitter autocomplete, find usages.
[ ] Продумать, а не подключать ли зависимости через один файл, зредварительно зареквайрив их в свойства module.exports этого файла.
[ ] Посмотреть, как вместо @see можно использовать @lisntens так, чтобы работало find definitions.
[ ] Подумать, как можно использовать JSDoc-тэги @module и @namespace + http://habrahabr.ru/post/259281/. Возможно получится хорошая альтернатива Zend 1.0 namespacing.
[ ] Сделать, чтобы везде в проекте использовался Autoloader. Т.е. не использовались обычные require. Это позволит не использовать mockery.
[ ] Оптимизироваать зависимости в node_modules. Обновить npm-shrinkwrap.
[x] Скопировать /etc/init.d/s3uploader в проект в dpl/. Проверить, что он работает.
[x] Проверить, что все работает, если в spool добавляется сразу несколько файлов.
[x] Доделать обработку ошибок. А то ща все падает, когда S3 недоступен.
[x] Доработать, чтобы все заработало.
[?] Попробывать поиграться с process.paths и require.resolve() Попробывать убрать node_modules с глаз долой из корня проекта напр. в lib/node_modules. Хотя может так и не стоит. Т.к. не является общепринятым.
[?] Логика index.js должна быть перенесена в run/s3uploader.js. А index.js должен просто эксспортировать все зависимости из src.
[-] Сделать, чтобы S3Uploader_Autoloader брал неймспейс по наиболее длинному совпадению. Это лишнее. Пускай ClassLoader остается мексимально тупым.
[x] Доработать global.s3uploader.require.
[x] Возможно заменить непривычный _this на более привычный self.
[-] Продумать использование неймспейсов (Module Pattern). Напр. module.exports.S3Uploader.FileWatcher = FileWatcher; как-то так.
[x] Доработать EventType.
[-] Проработать идею config.js, как аналока package.json, но на уровне классов. Т.е. стандартизовать его разделы. Например создать раздел [general], раздел [dependencies]. В разделе [general] можно хранить настройки для index.js, Application, EventEmitter. В разделе [dependencies] -- настройки chokidar, tasks_queue, knox. можно добавить раздел для логгера итп.
[-] Подумать, а не добавить ли метод S3Uploader_EventService.raise(eventType, context), который будет проверять , что eventType присутствует в EventType. Можно еще проверять и context. Правда тогда для context нужно будет придумать какой-то способ хранения опесания ожидаемых полей. Формат например может быть JSONSchema. А проверку можно включать/отключать в develop/production.
